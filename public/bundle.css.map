{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte"
  ],
  "sourcesContent": [
    "<!-- This is an example for a Svelte browser app, if you are using SvelteKit, please see the following example:\n  https://codesandbox.io/p/sandbox/deep-chat-sveltekit-fn8h6x -->\n\n  <script>\n    import { DeepChat } from \"deep-chat-dev\";\n    import { onMount } from 'svelte';\n  \n    const initialMessages = [\n      { role: \"ai\", text: \"Hi, I'm **BIDARA**, bio-inspired design and research assisant. I'm an OpenAI [GPT-4](https://openai.com/research/gpt-4) [assistant](https://platform.openai.com/docs/assistants/how-it-works), that was instructed by [NASA's PeTaL initiative](https://www1.grc.nasa.gov/research-and-engineering/vine/petal/) to help others understand, learn from, and emulate the strategies used by living things to create sustainable designs and technologies using the [Biomimicry Institute's design process](https://toolbox.biomimicry.org/methods/process/).\" },\n      { role: \"ai\", text: \"Before we begin, please be advised:\\n\\n‣ **Do not share any sensitive information** in your conversations including but not limited to, personal information, sensitive or non-public government/company data, ITAR, CUI, export controlled, or trade secrets.  \\n‣ While OpenAI has safeguards in place, BIDARA may occasionally generate incorrect or misleading information and produce offensive or biased content.\" },\n      { role: \"ai\", text: \"How can I assist you today?\" }\n    ];\n\n    function getCurrentWeather(location) {\n      location = location.toLowerCase();\n      if (location.includes('tokyo')) {\n        return 'Good';\n      } else if (location.includes('san francisco')) {\n        return 'Mild';\n      } else {\n        return 'Very Hot';\n      }\n    }\n\n    function getCurrentTime(location) {\n      location = location.toLowerCase();\n      if (location.includes('tokyo')) {\n        return '10p';\n      } else if (location.includes('san francisco')) {\n        return '6p';\n      } else {\n        return '12p';\n      }\n    }\n\n    onMount(async () => { // runs after the component has finished loading.\n      const deepChatRef = document.getElementById('chat-element');\n\n      deepChatRef.onNewMessage = (message) => {\n        // save messages to localStorage.\n        // this function is called once for each message including initialMessages, ai messages, and user messages.\n      };\n\n      deepChatRef.onComponentRender = () => {\n        // save key to localStorage.\n        // The event occurs before key is set, and again, after key is set.\n        if (deepChatRef._activeService.key) {\n          if (localStorage.getItem(\"openai-key\") === null) {\n            localStorage.setItem('openai-key', deepChatRef._activeService.key);\n          }\n        }\n      };\n\n      deepChatRef.responseInterceptor = (response) => {\n        //console.log(response); // printed above\n        return response;\n      };\n    });    \n  </script>\n  \n  <main>\n    <!--\n      <h1>BIDARA</h1>\n      <div\n        style=\"\n          width:100%;\n          background-color: #f3f3f3;\n          border-radius: 10px;\n          padding: 12px;\n          padding-bottom: 15px;\n          text-align: left;\n          margin-left: auto;\n          margin-right: auto;\n        \"\n      >\n        <div>\n          <div style=\"font-size: 15px; line-height: 20px\">\n            <p><strong>BIDARA</strong> is a GPT-4 chatbot that was instructed to help scientists and engineers understand, learn from, and emulate the strategies used by living things to create sustainable designs and technologies.</p>\n\n            <p>BIDARA can guide users through the Biomimicry Institute’s Design Process, a step-by-step method to propose biomimetic solutions to challenges. This process includes defining the problem, biologizing the challenge, discovering natural models, abstracting design strategies, and emulating nature's lessons.</p>\n\n            <p>\n              <strong>WARNING</strong><br/>\n              - Do not share any sensitive information in your conversations including but not limited to, personal information, sensitive or non-public government/company data, ITAR, CUI, export controlled, or trade secrets.<br/>\n              - While OpenAI has safeguards in place, BIDARA may occasionally generate incorrect or misleading information and produce offensive or biased content.<br/>\n              - The chatbot may produce inaccurate information about people, places, or facts.\n            </p>\n          </div>\n        </div>\n      </div>-->\n    <!-- demo/textInput are examples of passing an object directly into a property -->\n    <!-- initialMessages is an example of passing a state object into a property -->\n    <deep-chat\n      id=\"chat-element\"\n      directConnection={{\n        openAI: {\n          key: localStorage.getItem('openai-key'),\n          validateKeyProperty: true,\n          assistant: {\n            assistant_id: \"asst_0qjNhzjIMuwfjJJ2e4Cl8vdY\",\n            function_handler: (functionsDetails) => {\n              return functionsDetails.map((functionDetails) => {\n                let tmp = null;\n                if(functionDetails.name == \"get_weather\") {\n                  tmp = getCurrentWeather(functionDetails.arguments);\n                }\n                else if(functionDetails.name == \"get_time\") {\n                  tmp = getCurrentTime(functionDetails.arguments);\n                }\n                return tmp;\n              });\n            }\n          }\n        }\n      }}\n      _insertKeyViewStyles={{displayCautionText: false}}\n      demo={false}\n      mixedFiles={true}\n      textInput={{\n        styles: {\n          container: {\n            boxShadow: \"none\",\n            borderRadius: \"100vmax\",\n            border: \"1px solid rgba(0,0,0,0.2)\"\n          },\n          text: {\n            padding: \"0.4em 0.8em\"\n          }\n        },\n        placeholder:{text: \"Say something\"}\n      }}\n      initialMessages={initialMessages}\n      chatStyle={{\n        width: \"100%\",\n        height: \"100dvh\",\n        backgroundColor: \"white\",\n        border: \"none\",\n        fontSize: \"16px\",\n        fontFamily: 'system-ui, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n      }}\n      messageStyles={{\n        default: {\n          shared: {\n            bubble: {\n              maxWidth: \"75%\"\n            }\n          }\n        }\n      }}\n      submitButtonStyles={{\n        submit: {\n          container: {\n            default: {\n              width: \".9em\",\n              height: \".9em\",\n              right: \"calc(10% + 0.4em)\",\n              bottom: \".9em\",\n              borderRadius: \"100vmax\",\n              padding: \"0.3em 0.3em 0.34em 0.32em\",\n              backgroundColor: \"rgb(0, 132, 255)\"\n            }\n          },\n          svg: {\n            content: '<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 115.4 122.88\"><title>up-arrow</title><path d=\"M24.94,67.88A14.66,14.66,0,0,1,4.38,47L47.83,4.21a14.66,14.66,0,0,1,20.56,0L111,46.15A14.66,14.66,0,0,1,90.46,67.06l-18-17.69-.29,59.17c-.1,19.28-29.42,19-29.33-.25L43.14,50,24.94,67.88Z\"/></svg>',\n            styles: {\n              default: {\n                filter: \"brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(7500%) hue-rotate(315deg) brightness(99%) contrast(102%)\"\n              }\n            }\n          }\n        }\n      }}\n    />\n  </main>\n\n  <style>\n    main {\n      font-family: system-ui, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n      display: grid;\n    }\n  </style>\n\n"
  ],
  "names": [],
  "mappings": "AAgLI,kBAAK,CACH,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,mBAAmB,CAAC,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAClI,OAAO,CAAE,IACX"
}